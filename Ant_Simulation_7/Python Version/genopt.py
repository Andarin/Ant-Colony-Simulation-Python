# -*- coding: utf-8 -*-'''[Ant Simulation - a small simulation of an anthill with Pygame]Copyright (C) [2012]  [Malte Lichtenberg, Lucas Tittmann]This program is free software; you can redistribute it and/or modify it underthe terms of the GNU General Public License as published by the Free SoftwareFoundation; either version 3 of the License, or (at your option) any later version.This program is distributed in the hope that it will be useful, butWITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITYor FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public Licensefor more details.You should have received a copy of the GNU General Public License along with thisprogram; if not, see <http://www.gnu.org/licenses/>.'''import mainimport numpy as npimport random### Sum of Coeff = seed_length !!### seed_ant_nr and seed_scouter only Integers### seed_stampede and seed_straight_forward in [0,1]def geneticopt(mutationCoeff=3,               convexmutCoeff=2,               crossmutCoeff=2, ###only 0 or 2               eliteCoeff=3,               runs=1,               generations=10,               seed_length=10,               mapdirectory='scenario/',               evaporating_time=1000,               food_coord=[50,110]):    allResults=np.zeros((seed_length*runs*(generations+1), 5))    for run in xrange(runs):        print "run", run        seed_ant_nr=np.random.random_integers(10,50,seed_length)        seed_stampede=np.random.random(seed_length)        seed_straight_forward=np.random.random(seed_length)        seed_scouter=np.random.random_integers(1,20,seed_length)        #print "seeds: ", seed_ant_nr, seed_stampede, seed_straight_forward, seed_scouter                results=np.zeros((seed_length, 5))        draft=np.zeros((1,5))        #ResultsOfRun=np.zeros((seed_length*generations,5)) # to do        ResultsOfRun=results        SortedResultsOfRun=results                for i in xrange(seed_length):                            text = "# Here can be instructions for a map\n# if small, \tcoords should be in x = 5 to 295; y = 40 to 335\n# if big, \tcoords should be in x = 5 to 595; y = 80 to 675\n\n# in the comparison, food and colony coords are given, the rest is free choosable\n\nboard_size = small\n\nfood = {coord = {"\            + str(food_coord[0]) +","+ str(food_coord[1]) +"}, amount = 10000}\n\n\ncolony = {coord = {150,50}, ants = "\            + str(seed_ant_nr[i]) +"}\n barrier = {coord = {102,100}, {198,100}} \n# Board parameters\n\nevaporating_time = "\            + str(evaporating_time) +"\t\t# in rounds\nfield_smell_memory_lim = -1 \t# how many smells can be stored, -1 means no limitation\n        \n# Ant parameters\nself.stampede = "\            + str(seed_stampede[i]) +"\t# how likely the ant just chooses a random field, 1 means always\nself.straight_forward = "\            + str(seed_straight_forward[i]) +"\t# how likely the ant choses a field in front of her, 1 means always \n scouter="\            + str(seed_scouter[i]) + "\t# pucki"                            #map_name = str(seed_ant_nr[i])+"_"+ str(seed_stampede[i])+"_"+ str(seed_straight_forward[i])+"_"+ str(seed_scouter[i]) + "_"+ "dis.txt"            map_name = str(run) +"_"+ str(0) +"_"+ str(i)+ "_" + "dis.txt"            f = file(mapdirectory+map_name, 'w')            f.write(text)            f.close()            #print draft[0,0:5]            #print np.array([[seed_ant_nr[i]+seed_stampede[i]+seed_straight_forward[i]+seed_scouter[i], seed_ant_nr[i], seed_stampede[i], seed_straight_forward[i], seed_scouter[i]]])            #draft[0,0:5]=np.array([seed_ant_nr[i]+seed_stampede[i]+seed_straight_forward[i]+seed_scouter[i], seed_ant_nr[i], seed_stampede[i], seed_straight_forward[i], seed_scouter[i]])            result = main.start(map_name = mapdirectory+map_name, make_genetic_algo = True, fast_start = False)            if result[0] != 0:                to_minimize = result[0]*seed_ant_nr[i]            else:                # minimize after %of best way just as 2n criteria                # therefor add 2 Mio if way not found                # fourthermore punish a lot of ants, 1% shall be worth 10 ants                to_minimize = 2000000 + (result[2]-1)*1000 + seed_ant_nr[i]            draft[0,0:5]=np.array([to_minimize,seed_ant_nr[i], seed_stampede[i], seed_straight_forward[i], seed_scouter[i]])            results[i,0:5]=draft        ResultsOfRun[0:seed_length,0:5]=results        results=results[results[:,0].argsort()]        SortedResultsOfRun[0:seed_length,0:5]=results        #print "after first iteration results (=ResultsOfRun): ", ResultsOfRun        #print " first sorted Results: ", results                el=eliteCoeff        co=convexmutCoeff        cr=crossmutCoeff        mu=mutationCoeff                                for gen in xrange(generations):            print "gen", gen            # elite            seed_ant_nr[0:el]=results[0:el,1]            seed_stampede[0:el]=results[0:el,2]            seed_straight_forward[0:el]=results[0:el,3]            seed_scouter[0:el]=results[0:el,4]            #convexmutation            for c in xrange(co):                seed_ant_nr[el+c]=round(0.5*results[0,1]+0.5*results[c+1,1])                seed_stampede[el+c]=0.5*results[0,2]+0.5*results[c+1,2]                seed_straight_forward[el+c]=0.5*results[0,3]+0.5*results[c+1,3]                seed_scouter[el+c]=round(0.5*results[0,4]+0.5*results[c+1,4])            if crossmutCoeff==2:                             ####### (cross mutation) ##### only for crossmutCoeff=2                 seed_ant_nr[el+co]=results[0,1]                seed_ant_nr[el+co+1]=results[1,1]                seed_stampede[el+co]=results[1,2]                seed_stampede[el+co+1]=results[0,2]                seed_straight_forward[el+co]=results[0,3]                seed_straight_forward[el+co+1]=results[1,3]                seed_scouter[el+co]=results[1,4]                seed_scouter[el+co+1]=results[0,4]                        #######            # random mutation            seed_ant_nr[el+co+cr:el+co+cr+mu]=np.maximum(np.ones(mu),results[0:mu,1]+np.random.randint(-5,5))            seed_stampede[el+co+cr:el+co+cr+mu]=np.maximum(np.zeros(mu),results[0:mu,2]+np.random.uniform(-0.1,0.1))            seed_straight_forward[el+co+cr:el+co+cr+mu]=np.maximum(np.zeros(mu),results[0:mu,3]+np.random.uniform(-0.1,0.1))            seed_scouter[el+co+cr:el+co+cr+mu]=np.maximum(np.ones(mu),results[0:mu,4]+np.random.randint(-1,1))            print "seeds: ", seed_ant_nr, seed_stampede, seed_straight_forward, seed_scouter            ######!!!!!!!!## ifs einbauen, damit parameter nicht ausserhalb wertebereich kommen.            for i in xrange(seed_length):                                text = "# Here can be instructions for a map\n# if small, \tcoords should be in x = 5 to 295; y = 40 to 335\n# if big, \tcoords should be in x = 5 to 595; y = 80 to 675\n\n# in the comparison, food and colony coords are given, the rest is free choosable\n\nboard_size = small\n\nfood = {coord = {"\                + str(food_coord[0]) +","+ str(food_coord[1]) +"}, amount = 10000}\n\n\ncolony = {coord = {150,50}, ants = "\                + str(seed_ant_nr[i]) +"}\n barrier = {coord = {102,100}, {198,100}} \n#Board parameters\n\nevaporating_time = "\                + str(evaporating_time) +"\t\t# in rounds\nfield_smell_memory_lim = -1 \t# how many smells can be stored, -1 means no limitation\n        \n# Ant parameters\nself.stampede = "\                + str(seed_stampede[i]) +"\t# how likely the ant just chooses a random field, 1 means always\nself.straight_forward = "\                + str(seed_straight_forward[i]) +"\t# how likely the ant choses a field in front of her, 1 means always \n scouter="\                + str(seed_scouter[i]) + "\t# pucki"                                #map_name = str(seed_ant_nr[i])+"_"+ str(seed_stampede[i])+"_"+ str(seed_straight_forward[i])+"_"+ str(seed_scouter[i]) + "_"+ "dis.txt"                map_name = str(run)+"_"+str(gen+1)+"_"+ str(i)+ "_" + "dis.txt"                f = file(mapdirectory+map_name, 'w')                f.write(text)                f.close()# following the call of the main method                #draft[0,0:5]=np.array([seed_ant_nr[i]+seed_stampede[i]+seed_straight_forward[i]+seed_scouter[i],seed_ant_nr[i], seed_stampede[i], seed_straight_forward[i], seed_scouter[i]])                result = main.start(map_name = mapdirectory+map_name, make_genetic_algo = True, fast_start = False)                if result[0] != 0:                    to_minimize = result[0]*seed_ant_nr[i]                else:                    # minimize after %of best way just as 2n criteria                    # therefor add 2 Mio if way not found                    # fourthermore punish a lot of ants, 1% shall be worth 10 ants                    to_minimize = 2000000 + (result[2]-1)*1000 + seed_ant_nr[i]                draft[0,0:5]=np.array([main.start(map_name = mapdirectory+map_name, make_genetic_algo = True, fast_start = False)[0]*seed_ant_nr[i],seed_ant_nr[i], seed_stampede[i], seed_straight_forward[i], seed_scouter[i]])                results[i,0:5]=draft                #print "inloopresults: ", results            ResultsOfRun=np.append(ResultsOfRun,results,axis=0)            #ResultsOfRun[(1+gen)*seed_length:seed_length+(1+gen)*seed_length,0:5]=results            results=results[results[:,0].argsort()]            SortedResultsOfRun=np.append(SortedResultsOfRun,results,axis=0)            #print "sorted results: ", results        #print  "last SortedResultsOfRun: ", len(SortedResultsOfRun)        allResults[run*seed_length*(generations+1):run*seed_length*(generations+1)+seed_length*(generations+1),0:5]=SortedResultsOfRun            #print "last ResultsOfRun: ", ResultsOfRun        #print  "allResults: ", allResults        np.savetxt(str(run) + "_" + "SortedResultsOfRun.csv", SortedResultsOfRun, delimiter=",")            np.savetxt("allResults.csv", allResults, delimiter=",")        return allResultstestresults=geneticopt(mutationCoeff=3,     # how many species of the last generation go into the next               convexmutCoeff=2,            # how many convex combinations are made               crossmutCoeff=2,             # only 0 or 2; how many parameter exchange vectors               eliteCoeff=3,                # how many slight variances of original species are made               runs=2,                      # how many runs of the genetic algorithm               generations=14,              # how many generations               seed_length=10,              # sum of first 4 parameters               mapdirectory='scenario/',               evaporating_time=20000,               food_coord=[150,150])